#!/usr/bin/env sh

: '
Using format "<category>_<branch-description>", start your branch name with on of these category word:

- ft --> for adding, refactoring or removing a feature.
- bf --> for bug fixing.
- bd --> for creating specific build artifacts or for doing code coverage runs.
- rl --> for tagging a specific release version.
- ts --> for testing or experimenting outside of an issue/ticket.
- mg --> for temporary branch in resolving merge conflicts.
- ch --> for chore or everything else (writing documentation, formatting, adding tests, cleaning useless code etc).

Example: bf_fix-carryover-tags
 '

LC_ALL=C

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

local_branch="$(git rev-parse --abbrev-ref HEAD)"
branch_format="^(development|master|main|(ch|ft|fix|ts|bd|rl|mg|(b|h)f)(\_[a-zA-Z0-9]+([-][a-zA-Z0-9]+)*){1,2}|release\_[0-9]+(\.[0-9]+)*(-(alpha|beta|rc)[0-9]*)?)$"
convention_docs='https://tokopedia.atlassian.net/wiki/spaces/PINFRA/pages/2020868902/Convention+for+Naming+Branches+and+Commits'

# check semantic scheme
if [[ ! $local_branch =~ $branch_format ]]; then
  printf "Your branch didn't follow the convention: ${YELLOW}$local_branch${NC}

Correct example: ${GREEN}ft_add-awesome-feature${NC}

Please refer to: ${BLUE}\e[4m${convention_docs}"; echo
  exit 1
fi

exit 0
